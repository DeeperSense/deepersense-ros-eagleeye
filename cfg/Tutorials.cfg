#!/usr/bin/env python
PACKAGE = "dynamic_tutorials"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("enable_gamma_correction",   bool_t,    0, "An Integer parameter", False)
gen.add("gamma",   double_t,    0, "Gamma correction", 0.5,  0, 2.0)
gen.add("enable_adaptive_beam_denoising",   bool_t,    0, "Enable adaptive beam denoising", True)
gen.add("adaptive_low_threshold",   int_t,    0, "An Integer parameter", 240,  0, 255)
gen.add("adaptive_high_threshold",   int_t,    0, "An Integer parameter", 255,  0, 255)
gen.add("min_threshold_offset",   int_t,    0, "An Integer parameter", 0,  -255, 255)
gen.add("enable_warping",   bool_t,    0, "An Integer parameter", True)
gen.add("warping_mixing_factor",   double_t,    0, "An Integer parameter", 0.5,  0, 1.0)
gen.add("enable_blur",   bool_t,    0, "Enable blur", True)
gen.add("blur_kernel_size",   int_t,    0, "Blur kernel size", 2,  1, 100)
gen.add("enable_morphological_operations",   bool_t,    0, "Enable morphological operations", True)
gen.add("threshold_max",    int_t,    0, "An Integer parameter", 240,  0, 255)
gen.add("threshold_min",    int_t,    0, "An Integer parameter", 30,  1, 255)
gen.add("max_pixel_num",   int_t,    0, "An Integer parameter", 100,  0, 10000)
gen.add("target_min_size",    double_t,    0, "Target min size", 0.1,  0, 20.)
gen.add("target_max_size",    double_t,    0, "Target max size", 1.3,  0, 20.)
gen.add("latch_min_size",    double_t,    0, "Latch min size", 0.1,  0, 20.)
gen.add("latch_max_size",    double_t,    0, "Latch max size", 1.3,  0, 20.)


# gen.add("int_param2",    int_t,    0, "An Integer parameter", 50,  0, 100)
# gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")

# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "dynamic_tutorials", "Tutorials"))