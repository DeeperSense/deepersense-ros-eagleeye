#! /usr/bin/env python

from __future__ import print_function
import sys
import os
from time import sleep
import rospy
import numpy as np
import actionlib
import cv2
import struct
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import Image
from cola2_msgs.msg import NavSts
from teledyne_m900_fls.msg import ListOfArrays
from teledyne_m900_fls.msg import FLSAction, FLSGoal, FLSResult, FLSFeedback
from process_and_track import process_and_track #Vered's algo
from image_denoise import image_denoise #Yevgeni denoising
from get_r_theta import get_r_theta #Yevgeni find range and bearing
from help_functions import min_max_to_range
from sensor_msgs import point_cloud2
from sensor_msgs.msg import PointCloud2, PointField
from std_msgs.msg import Header

#for transformations
from cola2.utils.ned import NED
from cola2_ros.diagnostic_helper import DiagnosticHelper
from cola2_ros.transform_handler import TransformHandler
import tf
from help_functions import transform_from_tf #Yevgeni added for tf
from nav_msgs.msg import Odometry  # orientation of the vehicle

#for topic synchronization
import message_filters
from sensor_msgs.msg import Image, CameraInfo



# Globals
br = CvBridge()

client_dir = os.path.dirname(os.path.realpath(__file__))
yaml = client_dir + os.path.sep + "fls.yaml"
sleep_between_pings = 1

p = process_and_track(track="mixture_particles")
d = image_denoise()
r = get_r_theta()
#h = help_functions()


class FlsDetection(object):

    def __init__(self):
        """Constructor that gets config, publishers and subscribers."""
        # Get namespace and config
        self.ns = rospy.get_namespace()

        self.pub_denoised = rospy.Publisher(self.ns + 'FLS/Img_denoised', Image, queue_size=10)
        self.pub_circles = rospy.Publisher(self.ns + "FLS/Circles", Image, queue_size=10)
        self.pub_frontcnt = rospy.Publisher(self.ns + "FLS/Front_Contour", Image, queue_size=10)
        self.pub_circles_img = rospy.Publisher(self.ns + "FLS/Circles_Image", Image, queue_size=10)
        self.pub_frontcnt_img = rospy.Publisher(self.ns + "FLS/Front_Contour_Image", Image, queue_size=10)
        self.pub_point_cloud = rospy.Publisher(self.ns + "FLS/Front_Contour_cloud", PointCloud2, queue_size=10)
        self.pub_2D_cloud = rospy.Publisher(self.ns + "FLS/point_cloud2D", PointCloud2, queue_size=20)
        self.pub_ned_cloud = rospy.Publisher(self.ns + "FLS/ned_point_cloud", PointCloud2, queue_size=20)


        # Get transforms
        found = False
        self.tf_handler = TransformHandler()
        while (not found) and (not rospy.is_shutdown()):
            try:
                _, fls_xyz, fls_rpy = self.tf_handler.get_transform(self.ns + 'FLS')
                tf_fls = transform_from_tf(fls_xyz, fls_rpy)
                self.fls_pos = tf_fls[0]
                self.fls_rot = tf_fls[1]

                rospy.loginfo("fls tf loaded")

                found = True
            except Exception as e:
                rospy.logwarn("cannot find FLS transform")
                rospy.logwarn(e.message)
                rospy.sleep(2.0)
                #exit(1) This should not exit as sometimes not all tfs are available on the first run
        print('FLS detection node initialized')

        rospy.Subscriber(self.ns + 'FLS/Img_color/bone/mono', Image, self.process_fls_info)
        # Odometry subscriber
        rospy.Subscriber(self.ns + 'dynamics/odometry', Odometry, self.fls2world, queue_size=1)


        #image_sub = message_filters.Subscriber("/FLS/Img_color1/display", Image)
	image_sub = message_filters.Subscriber(self.ns + 'FLS/Img_color/bone/mono', Image)
        odom_sub = message_filters.Subscriber(self.ns + 'dynamics/odometry', Odometry)

        ts = message_filters.TimeSynchronizer([image_sub, odom_sub], 10)
        ts.registerCallback(self.sync)
        self.sync(Image, Odometry)

    def sync(self, image, Odometry):
        print("hi")



    def process_fls_info(self, info):
    #def process_fls_info(self, info, Odometry):
    # It should contain 3 arrays - sonar image mono, sonar image color and ranges

        mono_img = cv2.cvtColor(br.imgmsg_to_cv2(info, desired_encoding="passthrough"), cv2.COLOR_RGB2GRAY)
        range_img = min_max_to_range(0.5, 30, mono_img)
        mask = d.image_denoise(mono_img , range_img)
        ranges = cv2.bitwise_and(range_img, range_img, mask = mask)
        thetas = r.get_r_theta(mono_img, ranges)

        hight, width = ranges.shape
        ranges = ranges.reshape([hight * width,1])
        thetas = thetas.reshape([hight * width,1])

        self.pub_2D_cloud.publish(self.RthetaToCloud(ranges, thetas))
        self.pub_ned_cloud.publish(self.RthetaToWorldCloud(ranges, thetas))    
        self.pub_denoised.publish(br.cv2_to_imgmsg(mask, encoding="passthrough"))

        [c, f, img_c, img_f, img_b] = p.process_and_track(mono_img, range_img)
        if c.size and f.size:
                self.pub_circles.publish(br.cv2_to_imgmsg(c, encoding="passthrough"))
                self.pub_frontcnt.publish(br.cv2_to_imgmsg(f, encoding="passthrough"))
                self.pub_point_cloud.publish(self.fToXYZ(f))
        self.pub_circles_img.publish(br.cv2_to_imgmsg(img_c, encoding="passthrough"))
        self.pub_frontcnt_img.publish(br.cv2_to_imgmsg(img_f, encoding="passthrough"))

        #fls2world(self, Odometry)

    def fToXYZ(self, f):
        #f[:,1] = f[:,1] - (np.pi)/2
        x = np.multiply(f[:,0], np.sin(f[:,1]))
        y = np.multiply(f[:,0], np.cos(f[:,1]))
        z = np.zeros((len(x),), dtype=float)

        x = x.astype(np.float)
        y = y.astype(np.float)
        points = np.column_stack([x,y,z])
        fields = [PointField('x', 0, PointField.FLOAT32, 1),
                  PointField('y', 4, PointField.FLOAT32, 1),
                  PointField('z', 8, PointField.FLOAT32, 1),]

        header = Header()
        header.frame_id = "sparus2/FLS"
        pc2 = point_cloud2.create_cloud(header, fields, points)

        return pc2

    def RthetaToCloud(self, ranges, thetas):
        X = ranges *  np.sin(thetas)
        Y = ranges *  np.cos(thetas)
        x = (X[(X**2 + Y**2)**0.5 > 5.5])
        y = (Y[(X**2 + Y**2)**0.5 > 5.5])
        z = np.zeros((len(x),), dtype=float)

        x = x.astype(np.float)
        y = y.astype(np.float)


        points = np.column_stack([x,y,z])
        fields = [PointField('x', 0, PointField.FLOAT32, 1),
                  PointField('y', 4, PointField.FLOAT32, 1),
                  PointField('z', 8, PointField.FLOAT32, 1),]

        header = Header()
        header.frame_id = "sparus2/FLS"
        pc2 = point_cloud2.create_cloud(header, fields, points)
        return pc2

    def RthetaToWorldCloud(self, ranges, thetas):

        X = ranges *  np.sin(thetas) 
        Y = ranges *  np.cos(thetas) 
        #x = (X[(X**2 + Y**2)**0.5 > 5.5])
        #y = (Y[(X**2 + Y**2)**0.5 > 5.5])
        z = np.zeros((len(X),), dtype=float) #- self.fls2ned_pos[2]

        x = X.astype(np.float)
        y = Y.astype(np.float)

        points = np.column_stack([x,y,z])

        points2body = self.fls_rot.dot(points.T) + self.fls_pos

        points2world = self.rot.dot(points2body) + self.ned
  
        fields = [PointField('x', 0, PointField.FLOAT32, 1),
                  PointField('y', 4, PointField.FLOAT32, 1),
                  PointField('z', 8, PointField.FLOAT32, 1),]

        header = Header()
        header.frame_id = "world"
        pc2 = point_cloud2.create_cloud(header, fields, points2world.T)
        return pc2



    def fls2world(self, msg):
        """Get odometry from dynamics to know where the vehicle is."""
        odom = msg

        rpy = tf.transformations.euler_from_quaternion([msg.pose.pose.orientation.x,
                                                             msg.pose.pose.orientation.y,
                                                             msg.pose.pose.orientation.z,
                                                             msg.pose.pose.orientation.w])

        self.ned = np.array([[odom.pose.pose.position.x, odom.pose.pose.position.y, odom.pose.pose.position.z]]).T
        # Transform from sensor
        self.rot = tf.transformations.euler_matrix(*rpy)[:3, :3]


        #ned2body = rot.dot(ned)
        #body2fls = self.fls_rot.dot(self.fls_pos)



        #fls2body = self.fls_rot(self.fls_pos) 
        #fls_xyz = self.fls_pos.dot(self.fls_rot)


        #fls2ned = ned #+ np.array([[fls_xyz[0], fls_xyz[1], fls_xyz[2]]]).T
        #self.fls2ned_pos = fls2ned[1]
        #self.fls2ned_rot = fls2ned[2]
        #print('self.fls_rot')
        #print(self.fls_pos)
        #print('self.fls_rot')
        #print(self.rot)


if __name__ == '__main__':
    # init
    rospy.init_node('FlsDetection')
    node = FlsDetection()
    rospy.spin()
